{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","timeApi","App","state","query","idForNextCity","lastCityInTheList","currentShowingCityID","weather","listOfCities","handleSearch","event","setState","target","value","currentCity","search","key","fetch","then","res","json","result","newCity","cityId","weatherInfo","cityCoord","lat","coord","long","lon","timeRes","timeResult","lastUpdateCityTime","time_24","cityWithCord","newArray","prevState","catch","error","console","nextCityChangeHandler","length","prevCityChangeHandler","dateBuilder","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","cityIdToShow","this","leftArrowClass","rightArrowClass","appBackgroundClass","push","cityTimeForBackground","evening","night","className","join","type","placeholder","onChange","onKeyPress","main","onClick","name","sys","country","Date","Math","round","temp","src","icon","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bd2ac84a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nconst api = {\n  key: '6b5eaf09b6d23acb71e8f02bfa067a66',\n  base: 'https://api.openweathermap.org/data/2.5/'\n}\n\nconst timeApi = {\n  key: \"cbbe33181e2b4c389ee8303db47d81b0\",\n  base: \"https://api.ipgeolocation.io/timezone?apiKey=\"\n}\n\nclass App extends React.Component {\n  state = {\n    query: '',\n    idForNextCity: 0,\n    lastCityInTheList: false,\n    currentShowingCityID: 0,\n    weather: {},\n    listOfCities: []\n\n  }\n\n  handleSearch = (event) => {\n    this.setState({\n      query: event.target.value,\n      currentCity: event.target.value\n    })\n\n  }\n\n  search = (event) => {\n    if (event.key === 'Enter') {\n      fetch(`${api.base}weather?q=${this.state.query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          let newCity = {\n            cityId: this.state.idForNextCity,\n            weatherInfo: result\n          }\n          let cityCoord = {\n            lat: newCity.weatherInfo.coord.lat,\n            long: newCity.weatherInfo.coord.lon\n          }\n\n          fetch(`${timeApi.base}${timeApi.key}&lat=${cityCoord.lat}&long=${cityCoord.long}`)\n            .then(timeRes => timeRes.json())\n            .then(timeResult => {\n              let lastUpdateCityTime = timeResult.time_24\n              let cityWithCord = {\n                ...newCity,\n                lastUpdateCityTime\n              }\n              // console.log(cityWithCord)\n              let newArray = [\n                ...this.state.listOfCities,\n                cityWithCord\n              ]\n              // console.log(newArray)\n              this.setState(prevState => ({\n                query: '',\n                weather: result,\n                idForNextCity: prevState.idForNextCity + 1,\n                currentShowingCityID: newCity.cityId,\n                listOfCities: newArray\n              }))\n            })\n            .catch((error => {\n              console.error('Error:', error);\n            }))\n        })\n        .catch((error => {\n          console.error('Error:', error);\n        }))\n\n    }\n\n\n  }\n  nextCityChangeHandler = () => {\n    if (this.state.currentShowingCityID === this.state.listOfCities.length - 1) {\n      this.setState({\n        currentShowingCityID: 0\n      })\n    } else {\n      this.setState(prevState => ({\n        currentShowingCityID: prevState.currentShowingCityID + 1\n      }))\n    }\n  }\n\n  prevCityChangeHandler = () => {\n    if (this.state.currentShowingCityID === 0) {\n      this.setState(prevState => ({\n        currentShowingCityID: prevState.listOfCities.length - 1\n      }))\n    } else {\n      this.setState(prevState => ({\n        currentShowingCityID: prevState.currentShowingCityID - 1\n      }))\n    }\n\n  }\n\n  dateBuilder = (d) => {\n\n    let months = ['January', 'February', 'March', \"April\", 'May', 'June', 'July',\n      'August', 'September', 'October', 'November', 'December'];\n    let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  render() {\n\n    let cityIdToShow = this.state.currentShowingCityID;\n    let leftArrowClass = [\"fas fa-angle-left arrowBtn\"]\n    let rightArrowClass = [\"fas fa-angle-right arrowBtn\"]\n    let appBackgroundClass = ['app']\n    if (this.state.listOfCities.length > 1) {\n      leftArrowClass.push('activeBtn')\n      rightArrowClass.push('activeBtn')\n    }\n\n    if (this.state.listOfCities.length > 0) {\n      const cityTimeForBackground = this.state.listOfCities[cityIdToShow].lastUpdateCityTime;\n      const morning = cityTimeForBackground > \"06\" && cityTimeForBackground < \"12\"\n      const day = cityTimeForBackground > \"12\" && cityTimeForBackground < \"19\"\n      const evening = cityTimeForBackground > \"19\" && cityTimeForBackground < \"23\"\n      const night = cityTimeForBackground > \"23\" || cityTimeForBackground < \"06\"\n\n      if (morning) {\n        appBackgroundClass.push('morning')\n      } else if (day) {\n        appBackgroundClass.push('day')\n      } else if (evening) {\n        appBackgroundClass.push('evening')\n      } else if (night) {\n        appBackgroundClass.push('night')\n      }\n\n    }\n\n\n    return (\n      <div className={appBackgroundClass.join(' ')}>\n        <main>\n          <div className='search-box'>\n            <input\n              type='text'\n              className='search-input'\n              placeholder='Search...'\n              onChange={this.handleSearch}\n              value={this.state.query}\n              onKeyPress={this.search}\n\n            />\n          </div>\n\n\n\n          {(typeof this.state.weather.main != 'undefined') ? (\n            <div className='animated-container'>\n              <div className='location-container'>\n                <i className={leftArrowClass.join(' ')} onClick={this.prevCityChangeHandler} />\n\n                <div>\n                  <div className='location'> {this.state.listOfCities[cityIdToShow].weatherInfo.name}, {this.state.listOfCities[cityIdToShow].weatherInfo.sys.country} </div>\n                  <div className='date'>{this.dateBuilder(new Date())}</div>\n                  <div>Last Updated: {this.state.listOfCities[cityIdToShow].lastUpdateCityTime} (local)</div>\n                </div>\n                <i className={rightArrowClass.join(' ')} onClick={this.nextCityChangeHandler} />\n\n              </div>\n              <div className='weather-container'>\n                <div className='temp'>\n                  {Math.round(this.state.listOfCities[cityIdToShow].weatherInfo.main.temp)}°c\n            </div>\n                <div className='weather'>\n                  {this.state.listOfCities[cityIdToShow].weatherInfo.weather[0].main}\n                  <div className='icon-box'>\n                    <img src={`http://openweathermap.org/img/wn/${this.state.listOfCities[cityIdToShow].weatherInfo.weather[0].icon}@2x.png`} />\n                  </div>\n                </div>\n\n              </div>\n              {/* <button\n                onClick={() => this.setLocalTime(cityIdToShow)}\n\n              >Update</button> */}\n\n\n            </div>\n          )\n            :\n            null}\n\n\n\n\n\n        </main>\n\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}