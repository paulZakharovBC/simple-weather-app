{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","state","query","currentCity","weather","handleSearch","event","setState","target","value","search","key","fetch","then","res","json","result","updateCurrentCityWeather","dateBuilder","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","className","type","placeholder","onChange","this","onKeyPress","main","name","sys","country","Date","Math","round","temp","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wPAIMA,G,MACC,oCADDA,EAEE,2CA4GOC,E,4MAxGbC,MAAQ,CACNC,MAAO,GACPC,YAAa,GACbC,QAAS,I,EAGXC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZL,MAAOI,EAAME,OAAOC,MACpBN,YAAaG,EAAME,OAAOC,S,EAK9BC,OAAS,SAACJ,GACU,UAAdA,EAAMK,KACRC,MAAM,GAAD,OAAIb,EAAJ,qBAAyB,EAAKE,MAAMC,MAApC,+BAAgEH,IAClEc,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,EAAKT,SAAS,CACZL,MAAO,GACPE,QAASY,Q,EAMnBC,yBAA2B,WACzBL,MAAM,GAAD,OAAIb,EAAJ,qBAAyB,EAAKE,MAAME,YAApC,+BAAsEJ,IACxEc,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,EAAKT,SAAS,CACZH,QAASY,Q,EAQjBE,YAAc,SAACC,GAEb,IAIIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EANS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OACpE,SAAU,YAAa,UAAW,WAAY,YAK7BL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,I,uDAIlC,OACE,yBAAKE,UAAU,eACb,8BACE,yBAAKA,UAAU,cACb,2BACEC,KAAK,OACLD,UAAU,eACVE,YAAY,YACZC,SAAUC,KAAK3B,aACfI,MAAOuB,KAAK/B,MAAMC,MAClB+B,WAAYD,KAAKtB,UAKe,oBAA3BsB,KAAK/B,MAAMG,QAAQ8B,KAC1B,6BACE,yBAAKN,UAAU,sBACb,yBAAKA,UAAU,YAAf,IAA4BI,KAAK/B,MAAMG,QAAQ+B,KAA/C,KAAuDH,KAAK/B,MAAMG,QAAQgC,IAAIC,QAA9E,KACA,yBAAKT,UAAU,QAAQI,KAAKd,YAAY,IAAIoB,QAE9C,yBAAKV,UAAU,qBACb,yBAAKA,UAAU,QACZW,KAAKC,MAAMR,KAAK/B,MAAMG,QAAQ8B,KAAKO,MADtC,SAGA,yBAAKb,UAAU,WACZI,KAAK/B,MAAMG,QAAQA,QAAQ,GAAG8B,QASnC,W,GA3FIQ,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.892ac3c0.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nconst api = {\n  key: '6b5eaf09b6d23acb71e8f02bfa067a66',\n  base: 'https://api.openweathermap.org/data/2.5/'\n}\n\nclass App extends React.Component {\n  state = {\n    query: '',\n    currentCity: '',\n    weather: {}\n  }\n\n  handleSearch = (event) => {\n    this.setState({\n      query: event.target.value,\n      currentCity: event.target.value\n    })\n\n  }\n\n  search = (event) => {\n    if (event.key === 'Enter') {\n      fetch(`${api.base}weather?q=${this.state.query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          this.setState({\n            query: '',\n            weather: result\n          })\n        })\n    }\n  }\n\n  updateCurrentCityWeather = () => {\n    fetch(`${api.base}weather?q=${this.state.currentCity}&units=metric&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result => {\n        this.setState({\n          weather: result\n        })\n      })\n\n  }\n\n\n\n  dateBuilder = (d) => {\n\n    let months = ['January', 'February', 'March', \"April\", 'May', 'June', 'July',\n      'August', 'September', 'October', 'November', 'December'];\n    let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  render() {\n    return (\n      <div className=\"app morning\">\n        <main>\n          <div className='search-box'>\n            <input\n              type='text'\n              className='search-input'\n              placeholder='Search...'\n              onChange={this.handleSearch}\n              value={this.state.query}\n              onKeyPress={this.search}\n\n            />\n          </div>\n\n          {(typeof this.state.weather.main != 'undefined') ? (\n            <div>\n              <div className='location-container'>\n                <div className='location'> {this.state.weather.name}, {this.state.weather.sys.country} </div>\n                <div className='date'>{this.dateBuilder(new Date())}</div>\n              </div>\n              <div className='weather-container'>\n                <div className='temp'>\n                  {Math.round(this.state.weather.main.temp)}Â°c\n            </div>\n                <div className='weather'>\n                  {this.state.weather.weather[0].main}\n                </div>\n\n              </div>\n              {/* <button\n                onClick={this.updateCurrentCityWeather}\n\n              >Update</button> */}\n            </div>\n          ) : null}\n\n\n\n\n\n        </main>\n\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}