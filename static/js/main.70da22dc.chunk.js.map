{"version":3,"sources":["Components/CitiesSearch.js","App.js","serviceWorker.js","index.js"],"names":["CitiesSearch","props","className","cities","map","item","onClick","event","confirmCity","city","country","api","timeApi","App","state","query","chosenCityToShowWeather","idForNextCity","lastCityInTheList","showSearchingListPopUp","currentShowingCityID","weather","searchingCitiesList","listOfCities","handleSearch","setState","target","value","length","fetch","then","resp","json","result","list","data","catch","err","console","log","search","preventDefault","persist","latitude","longitude","res","newCity","cityId","weatherInfo","cityCoord","lat","coord","long","lon","timeRes","timeResult","lastUpdateCityTime","time_24","cityWithCord","newArray","prevState","error","nextCityChangeHandler","prevCityChangeHandler","dateBuilder","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","cityIdToShow","this","leftArrowClass","rightArrowClass","appBackgroundClass","push","cityTimeForBackground","evening","night","join","onSubmit","type","placeholder","minLength","debounceTimeout","onChange","main","name","sys","Date","Math","round","temp","src","icon","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.70da22dc.chunk.js","sourcesContent":["import React from 'react'\r\nimport './CitiesSearch.css'\r\n\r\nconst CitiesSearch = (props) => {\r\n    return (\r\n        <div className='listOfCities-box'>\r\n            <ul>\r\n                {/* <li>Москва</li>\r\n                <li>СПБ</li>\r\n                <li>Минск</li>\r\n                <li>Минск</li>\r\n                <li>Минск</li> */}\r\n                \r\n                {props.cities.map(function (item) {\r\n                    return (\r\n                        <li onClick={(event) => {props.confirmCity(item, event) }}>\r\n                            {item.city}, {item.country}\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CitiesSearch","import React from 'react';\nimport CitiesSearch from './Components/CitiesSearch'\nimport { DebounceInput } from 'react-debounce-input';\nimport './App.css';\n\n\nconst api = {\n  key: '6b5eaf09b6d23acb71e8f02bfa067a66',\n  base: 'https://api.openweathermap.org/data/2.5/'\n}\n\nconst timeApi = {\n  key: \"cbbe33181e2b4c389ee8303db47d81b0\",\n  base: \"https://api.ipgeolocation.io/timezone?apiKey=\"\n}\n\n\n\nclass App extends React.Component {\n  state = {\n    query: '',\n    chosenCityToShowWeather: '',\n    idForNextCity: 0,\n    lastCityInTheList: false,\n    showSearchingListPopUp: false,\n    currentShowingCityID: 0,\n    weather: {},\n    searchingCitiesList: [],\n    listOfCities: []\n\n  }\n\n  handleSearch = (event) => {\n    this.setState({\n      query: event.target.value,\n      // currentCity: event.target.value\n    })\n\n    if (this.state.query.length > 2) {\n      this.setState({\n        showSearchingListPopUp: true\n      })\n    } else {\n      this.setState({\n        showSearchingListPopUp: false\n      })\n    }\n\n    fetch(`https://wft-geo-db.p.rapidapi.com/v1/geo/cities?namePrefix=${this.state.query}&sort=-population`, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"wft-geo-db.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"f94ea70c7amsh93941eb1918691ep15f1ecjsn783eefb2ee1f\"\n      }\n    })\n      .then(resp => resp.json())\n      .then(result => {\n        let list = result;\n        this.setState({\n          searchingCitiesList: list.data\n        })\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n\n  }\n\n  search = (event, item) => {\n    event.preventDefault();\n    event.persist()\n    \n    // if (event.key === 'Enter') {\n    fetch(`${api.base}weather?lat=${item.latitude}&lon=${item.longitude}&appid=${api.key}`)\n      .then(res => res.json())\n      .then(result => {\n        let newCity = {\n          cityId: this.state.idForNextCity,\n          weatherInfo: result\n        }\n        let cityCoord = {\n          lat: newCity.weatherInfo.coord.lat,\n          long: newCity.weatherInfo.coord.lon\n        }\n\n        fetch(`${timeApi.base}${timeApi.key}&lat=${cityCoord.lat}&long=${cityCoord.long}`)\n          .then(timeRes => timeRes.json())\n          .then(timeResult => {\n            let lastUpdateCityTime = timeResult.time_24\n            let cityWithCord = {\n              ...newCity,\n              lastUpdateCityTime\n            }\n            // console.log(cityWithCord)\n            let newArray = [\n              ...this.state.listOfCities,\n              cityWithCord\n            ]\n            // console.log(newArray)\n            this.setState(prevState => ({\n              query: '',\n              weather: result,\n              idForNextCity: prevState.idForNextCity + 1,\n              currentShowingCityID: newCity.cityId,\n              listOfCities: newArray,\n              showSearchingListPopUp: false\n            }))\n          })\n          .catch((error => {\n            console.error('Error:', error);\n          }))\n      })\n      .catch((error => {\n        console.error('Error:', error);\n      }))\n\n  }\n\n  nextCityChangeHandler = () => {\n    if (this.state.currentShowingCityID === this.state.listOfCities.length - 1) {\n      this.setState({\n        currentShowingCityID: 0\n      })\n    } else {\n      this.setState(prevState => ({\n        currentShowingCityID: prevState.currentShowingCityID + 1\n      }))\n    }\n  }\n\n  prevCityChangeHandler = () => {\n    if (this.state.currentShowingCityID === 0) {\n      this.setState(prevState => ({\n        currentShowingCityID: prevState.listOfCities.length - 1\n      }))\n    } else {\n      this.setState(prevState => ({\n        currentShowingCityID: prevState.currentShowingCityID - 1\n      }))\n    }\n\n  }\n\n  dateBuilder = (d) => {\n\n    let months = ['January', 'February', 'March', \"April\", 'May', 'June', 'July',\n      'August', 'September', 'October', 'November', 'December'];\n    let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  confirmCity = (item, event) => {\n    this.setState({\n      query: item.city,\n      searchingCitiesList: []\n    })\n    this.search(event, item)\n  }\n\n\n\n  render() {\n\n    let cityIdToShow = this.state.currentShowingCityID;\n    let leftArrowClass = [\"fas fa-angle-left arrowBtn\"]\n    let rightArrowClass = [\"fas fa-angle-right arrowBtn\"]\n    let appBackgroundClass = ['app']\n    if (this.state.listOfCities.length > 1) {\n      leftArrowClass.push('activeBtn')\n      rightArrowClass.push('activeBtn')\n    }\n\n    if (this.state.listOfCities.length > 0) {\n      const cityTimeForBackground = this.state.listOfCities[cityIdToShow].lastUpdateCityTime;\n      const morning = cityTimeForBackground > \"06\" && cityTimeForBackground < \"12\"\n      const day = cityTimeForBackground > \"12\" && cityTimeForBackground < \"19\"\n      const evening = cityTimeForBackground > \"19\" && cityTimeForBackground < \"23\"\n      const night = cityTimeForBackground > \"23\" || cityTimeForBackground < \"06\"\n\n      if (morning) {\n        appBackgroundClass.push('morning')\n      } else if (day) {\n        appBackgroundClass.push('day')\n      } else if (evening) {\n        appBackgroundClass.push('evening')\n      } else if (night) {\n        appBackgroundClass.push('night')\n      }\n\n    }\n\n\n    return (\n      <div className='basic-lair'>\n        <div className={appBackgroundClass.join(' ')}>\n          <main>\n            <div className='search-box'>\n              <form onSubmit={this.search}>\n                <DebounceInput\n                  type='text'\n                  className='search-input'\n                  placeholder='Search...'\n                  minLength={1}\n                  debounceTimeout={800}\n                  onChange={this.handleSearch}\n                  // onKeyPress={this.search}\n                  value={this.state.query} />\n              </form>\n\n              {/* <input\n                onChange={this.handleSearch}\n                value={this.state.query}\n                onKeyPress={this.search}\n              /> */}\n\n\n            </div>\n            {/* <CitiesSearch\n              cities={this.state.searchingCitiesList}\n              confirmCity={this.confirmCity}\n\n            /> */}\n\n            {this.state.showSearchingListPopUp ? \n            <CitiesSearch\n            cities={this.state.searchingCitiesList}\n            confirmCity={this.confirmCity}\n\n          /> :\n          null\n            }\n\n\n\n            {(typeof this.state.weather.main != 'undefined') ? (\n              <div className='animated-container'>\n                <div className='location-container'>\n                  <i className={leftArrowClass.join(' ')} onClick={this.prevCityChangeHandler} />\n\n                  <div>\n                    <div className='location'> {this.state.listOfCities[cityIdToShow].weatherInfo.name}, {this.state.listOfCities[cityIdToShow].weatherInfo.sys.country} </div>\n                    <div className='date'>{this.dateBuilder(new Date())}</div>\n                    <p>Last Updated: {this.state.listOfCities[cityIdToShow].lastUpdateCityTime} (local)</p>\n                  </div>\n                  <i className={rightArrowClass.join(' ')} onClick={this.nextCityChangeHandler} />\n\n                </div>\n                <div className='weather-container'>\n                  <div className='temp'>\n                    {Math.round(this.state.listOfCities[cityIdToShow].weatherInfo.main.temp - 273.15)}°c\n            </div>\n                  <div className='weather'>\n                    {this.state.listOfCities[cityIdToShow].weatherInfo.weather[0].main}\n                    <div className='icon-box'>\n                      <img src={`http://openweathermap.org/img/wn/${this.state.listOfCities[cityIdToShow].weatherInfo.weather[0].icon}@2x.png`} />\n                    </div>\n                  </div>\n\n                </div>\n                {/* <button\n                onClick={() => this.setLocalTime(cityIdToShow)}\n\n              >Update</button> */}\n\n\n              </div>\n            )\n              :\n              null}\n\n\n\n\n\n          </main>\n\n        </div>\n      </div>\n    );\n\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}